(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (factory((global.blobUtil = {})));
}(this, (function (exports) { 'use strict';

    // TODO: including these in blob-util.ts causes typedoc to generate docs for them,
    // even with --excludePrivate ¯\_(ツ)_/¯
    /** @private */
    function loadImage(src, crossOrigin) {
        return new Promise(function (resolve, reject) {
            var img = new Image();
            if (crossOrigin) {
                img.crossOrigin = crossOrigin;
            }
            img.onload = function () {
                resolve(img);
            };
            img.onerror = reject;
            img.src = src;
        });
    }
    /** @private */
    function imgToCanvas(img) {
        var canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        // copy the image contents to the canvas
        var context = canvas.getContext('2d');
        context.drawImage(img, 0, 0, img.width, img.height, 0, 0, img.width, img.height);
        return canvas;
    }

    /* global Promise, Image, Blob, FileReader, atob, btoa,
       BlobBuilder, MSBlobBuilder, MozBlobBuilder, WebKitBlobBuilder, webkitURL */
    /**
     * Shim for
     * [`new Blob()`](https://developer.mozilla.org/en-US/docs/Web/API/Blob.Blob)
     * to support
     * [older browsers that use the deprecated `BlobBuilder` API](http://caniuse.com/blob).
     *
     * Example:
     *
     * ```js
     * var myBlob = blobUtil.createBlob(['hello world'], {type: 'text/plain'});
     * ```
     *
     * @param parts - content of the Blob
     * @param properties - usually `{type: myContentType}`,
     *                           you can also pass a string for the content type
     * @returns Blob
     */
    function createBlob(parts, properties) {
        parts = parts || [];
        properties = properties || {};
        if (typeof properties === 'string') {
            properties = { type: properties }; // infer content type
        }
        try {
            return new Blob(parts, properties);
        }
        catch (e) {
            if (e.name !== 'TypeError') {
                throw e;
            }
            var Builder = typeof BlobBuilder !== 'undefined'
                ? BlobBuilder : typeof MSBlobBuilder !== 'undefined'
                ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined'
                ? MozBlobBuilder : WebKitBlobBuilder;
            var builder = new Builder();
            for (var i = 0; i < parts.length; i += 1) {
                builder.append(parts[i]);
            }
            return builder.getBlob(properties.type);
        }
    }
    /**
     * Shim for
     * [`URL.createObjectURL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL)
     * to support browsers that only have the prefixed
     * `webkitURL` (e.g. Android <4.4).
     *
     * Example:
     *
     * ```js
     * var myUrl = blobUtil.createObjectURL(blob);
     * ```
     *
     * @param blob
     * @returns url
     */
    function createObjectURL(blob) {
        return (typeof URL !== 'undefined' ? URL : webkitURL).createObjectURL(blob);
    }
    /**
     * Shim for
     * [`URL.revokeObjectURL()`](https://developer.mozilla.org/en-US/docs/Web/API/URL.revokeObjectURL)
     * to support browsers that only have the prefixed
     * `webkitURL` (e.g. Android <4.4).
     *
     * Example:
     *
     * ```js
     * blobUtil.revokeObjectURL(myUrl);
     * ```
     *
     * @param url
     */
    function revokeObjectURL(url) {
        return (typeof URL !== 'undefined' ? URL : webkitURL).revokeObjectURL(url);
    }
    /**
     * Convert a `Blob` to a binary string.
     *
     * Example:
     *
     * ```js
     * blobUtil.blobToBinaryString(blob).then(function (binaryString) {
     *   // success
     * }).catch(function (err) {
     *   // error
     * });
     * ```
     *
     * @param blob
     * @returns Promise that resolves with the binary string
     */
    function blobToBinaryString(blob) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            var hasBinaryString = typeof reader.readAsBinaryString === 'function';
            reader.onloadend = function () {
                var result = reader.result || '';
                if (hasBinaryString) {
                    return resolve(result);
                }
                resolve(arrayBufferToBinaryString(result));
            };
            reader.on